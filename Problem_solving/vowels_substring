//  hackerank competition code for vowels substring
//  If not vowels found in entire string return Not found! else return such substring with specified length, If same length 2 substrings occurs returns the one with lowest index

//    Output
[LOG]: "cbrqtfg" 
[LOG]: Map (12) {"caber" => 2, "aberq" => 2, "berqi" => 2, "erqii" => 3, "rqiit" => 2, "qiite" => 3, "iitef" => 3, "itefg" => 2, "tefg" => 1, "efg" => 1, "fg" => 0, "g" => 0} 
[LOG]: "erqii
" 
[LOG]: "" 
[LOG]: "Not found!
" 
[LOG]: "zrd" 
[LOG]: Map (7) {"azerd" => 2, "zerdi" => 2, "erdii" => 3, "rdii" => 2, "dii" => 2, "ii" => 2, "i" => 1} 
[LOG]: "erdii" 



function findSubstring(s:string, k:number) {
    // Write your code here
    let vowels = "aeiouAEIOU";
    let strWithoutVowels =""
    for(let i=0; i<s.length; i++){
        if(vowels.indexOf(s.charAt(i)) === -1){       
            strWithoutVowels = strWithoutVowels + s.charAt(i)
        }  
    }
    console.log(strWithoutVowels)
    if(!strWithoutVowels || strWithoutVowels === "" || strWithoutVowels === s){
        return "Not found!"
    }
    
    let map = new Map();
    let subStr , numOfVowels
    for(let i=0;i<s.length;i++){
        subStr = s.substring(i,i+k)
        numOfVowels= numberOfVowels(subStr);
        if(!map.has(subStr)){
            map.set(subStr,numOfVowels)
        }
    }

console.log(map)
    let max =0, maxKey
    for(let [key,value] of map.entries()){
        if(value > max && value <= k){
            max = value
            maxKey = key;
        }
    }
    return maxKey
     

}
// console.log(findSubstring("caberqiitefg",2))
// console.log(findSubstring("eiuaooo",4)) // correct
console.log(findSubstring("azerdii",5))


